//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/DefaultControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultControl"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""99664db0-0656-41c1-b584-537af7aab7d7"",
            ""actions"": [
                {
                    ""name"": ""LeftBeater"",
                    ""type"": ""Button"",
                    ""id"": ""4c443b4c-e9ca-44b8-82e0-5a2c8b2a8a08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBeater"",
                    ""type"": ""Button"",
                    ""id"": ""dc8a0e7d-9343-4e1d-9bb2-869189c36e21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spring"",
                    ""type"": ""Button"",
                    ""id"": ""ed7f3a52-9801-4a48-9ef2-fa21a7ad8de0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a88ffcad-2e90-4b32-8262-9558d3edac1a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftBeater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53e6bb67-b18e-4a82-9fbe-69eec6126185"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightBeater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9ebe421-a4a4-49ef-9c8a-547d51c0157f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spring"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LeftBeater = m_Default.FindAction("LeftBeater", throwIfNotFound: true);
        m_Default_RightBeater = m_Default.FindAction("RightBeater", throwIfNotFound: true);
        m_Default_Spring = m_Default.FindAction("Spring", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_LeftBeater;
    private readonly InputAction m_Default_RightBeater;
    private readonly InputAction m_Default_Spring;
    public struct DefaultActions
    {
        private @DefaultControl m_Wrapper;
        public DefaultActions(@DefaultControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftBeater => m_Wrapper.m_Default_LeftBeater;
        public InputAction @RightBeater => m_Wrapper.m_Default_RightBeater;
        public InputAction @Spring => m_Wrapper.m_Default_Spring;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @LeftBeater.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftBeater;
                @LeftBeater.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftBeater;
                @LeftBeater.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftBeater;
                @RightBeater.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightBeater;
                @RightBeater.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightBeater;
                @RightBeater.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightBeater;
                @Spring.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSpring;
                @Spring.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSpring;
                @Spring.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSpring;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftBeater.started += instance.OnLeftBeater;
                @LeftBeater.performed += instance.OnLeftBeater;
                @LeftBeater.canceled += instance.OnLeftBeater;
                @RightBeater.started += instance.OnRightBeater;
                @RightBeater.performed += instance.OnRightBeater;
                @RightBeater.canceled += instance.OnRightBeater;
                @Spring.started += instance.OnSpring;
                @Spring.performed += instance.OnSpring;
                @Spring.canceled += instance.OnSpring;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnLeftBeater(InputAction.CallbackContext context);
        void OnRightBeater(InputAction.CallbackContext context);
        void OnSpring(InputAction.CallbackContext context);
    }
}
